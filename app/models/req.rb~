class Req < ActiveRecord::Base

  hobo_model # Don't put anything above this

  fields do
    url :string
    timestamps
    status :string, :default => 'unprocessed'
  end
  attr_accessible :url

  belongs_to :user, :creator => true
  
  after_create do |r|
    r.process_req
  end
  
  def process_req
    puts "process_req #{self.id} for #{self.url}"
    self.status = 'reading in progress'
    self.save
    @sites = siteread self.url, 2
    puts @sites.inspect
    self.status = 'storing in progress, processing sites'
    self.save
    process_sites
    self.status = 'sites processed, links in progress'
    self.save
    process_links
    self.status = 'processed'
    self.save
    puts "FINISHED process_req #{self.id} for #{self.url}"
  end
  handle_asynchronously :process_req
    
  def process_sites
    @sites[:sites].each do |siteitem|        
      sites = Site.all.where( name: siteitem[:site] )
      if sites.size > 0
	site = sites.first
	site.title = siteitem[:title]
	site.description = siteitem[:description]
	site.icon = siteitem[:icon]
	site.save
      else
	site = Site.create :name => siteitem[:site], 
	                   :title => siteitem[:title], 
			   :description => siteitem[:description], 
			   :icon => siteitem[:icon]
      end
      site.rank_by_links
      if self.user_id
        SiteUser.find_or_create_by_site_id_and_user_id site.id, self.user_id
      end
      site.splitwords self.user_id
    end    
  end
  
  def process_links
    @sites[:links].each do |linkitem|
      links = Link.all.where( sitename_from: linkitem[:url_from], sitename_to: linkitem[:url_to] )
      if links.size > 0
	link = links.first
	link.name = linkitem[:text]
	link.save
      else
	site_to = Site.find_by_name linkitem[:url_to]
	site_from = Site.find_by_name linkitem[:url_from]
	Link.create sitename_from: linkitem[:url_from],
		    sitename_to:   linkitem[:url_to],
		    site_from_id: site_from.id,
		    site_to_id:   site_to.id,
		    name:         linkitem[:text]
      end
    end
  end
  
  
  class UrlValidator < ActiveModel::EachValidator
    def validate_each(record, attribute, value)
      begin
        uri = URI.parse(value)
 
        if !["http","https"].include?(uri.scheme)
          raise URI::InvalidURIError
        end
      rescue URI::InvalidURIError
        record.errors[attribute] << "Invalid, should begin with 'http:// or https://'"
      end
    end
  end
 
  validates :url, :url => true

  
  
  # --- Permissions --- #

  def create_permitted?
    acting_user.administrator?
    true
  end

  def update_permitted?
    acting_user.administrator?
  end

  def destroy_permitted?
    acting_user.administrator?
  end

  def view_permitted?(field)
    true
  end

end
